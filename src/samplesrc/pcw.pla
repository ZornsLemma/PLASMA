// Personal Computer World benchmarks (from December 1986 issue)

include "inc/cmdsys.plh"
include "inc/dword.plh"
include "inc/testlib.plh"
include "inc/stdio.plh"

byte intmath16str[] = "intmath16"
byte intmath32str[] = "intmath32"
byte textscrnstr[] = "textscrn"
byte textscrnlinestr[] = "1234567890qwertyuiop "
byte grafscrnstr[] = "grafscrn"
byte storestr[] = "store"
byte storelinestr[] = "1234567890qwertyuiop\n"

// Benchmark start/finish times
byte start[5]
byte finish[5]

struc t_result
    word r_next
    word r_name
    word r_time
end

word results_head = 0
word results_tail_ptr = @results_head

// TODO: Get rid of need for BBC=1 and just modify plvmzp.inc?
asm equates
    BBC = 1
    !SOURCE "vmsrc/plvmzp.inc"
end

// plot(x, y)
asm plot
    LDA #25
    JSR $FFEE
    LDA #69
    JSR $FFEE
    LDA ESTKL+1,X
    JSR $FFEE
    LDA ESTKH+1,X
    JSR $FFEE
    LDA ESTKL,X
    JSR $FFEE
    LDA ESTKH,X
    INX
    JMP $FFEE
end

def puti32(p)
    byte ten[4], j[4], k[4]
    dword_fromuword(@ten, 10)
    if dword_isult(p, @ten)
	putc(^p + '0')
    else
	dword_div(@j, @k, p, @ten)
	puti32(@j)
	putc(k[0] + '0')
    fin
end

def time_delta(start, finish)
    // We can get away with ignoring the fifth byte; the result will be
    // correct unless there's a difference of more than one in the fifth
    // byte, and that's just not going to happen.
    byte delta_dword[4]
    dword_sub(@delta_dword, finish, start)
    if dword_isuword(@delta_dword)
	return dword_touword(@delta_dword)
    else
	return 0
    fin
end

def log_time(name)
    word result

    result = heapalloc(t_result)
    result=>r_next = 0
    result=>r_name = name
    result=>r_time = time_delta(@start, @finish)
    *results_tail_ptr = result
    results_tail_ptr = result+r_next
end

def show_times()
    word p, i
    p = results_head
    while p <> 0
	puts(p=>r_name)
	for i = 1 to 10 - ^(p=>r_name)
	    putc(' ')
	next
	// TODO: Would be nice to align the decimal points
	puti(p=>r_time / 100)
	putc('.')
	puti(p=>r_time % 100)
	putc('s')
	putln()
	p = p=>r_next
    loop
end

def time(t)
    call(1, t, t >> 8, 0, $FFF1)
end

// Actual benchmarks

def intmath16()
    word x, y, i
    time(@start)
    x = 0
    y = 9
    puts("Start\n")
    for i = 1 to 1000
	x = x + (y * y - y) / y
    next
    puts("Finish ")
    puti(x) // should be 8000
    putln()
    time(@finish)
    log_time(@intmath16str)
    if x <> 8000
	oserror(0, "intmath16 failed")
    fin
end

def intmath32()
    byte x[4], y[4], a[4]
    word i
    time(@start)
    dword_fromuword(@x, 0)
    dword_fromuword(@y, 9)
    puts("Start\n")
    for i = 1 to 1000
	// x = x + (y * y - y) / y
	dword_mul(@a, @y, @y)
	dword_sub(@a, @a, @y)
	dword_div(@a, 0, @a, @y)
	dword_add(@x, @x, @a)
    next
    puts("Finish ")
    puti32(@x) // should be 8000
    putln()
    time(@finish)
    log_time(@intmath32str)
    if not dword_isuword(@x) or dword_touword(@x)<>8000
	oserror(0, "intmath32 failed")
    fin
end

// This isn't quite a literal translation of the benchmark in the magazine, but
// this is necessary to avoid problems with the string pool.
def textscrn()
    word i
    if not mode(3)
	oserror(0, "Bad mode")
    fin
    time(@start)
    puts("Start\n")
    for i = 1 to 1000
	puts(@textscrnlinestr)
	puti(i)
	putln()
    next
    puts("Finish\n")
    time(@finish)
    log_time(@textscrnstr)
end

def grafscrn()
    word x, y
    const x_scale = 8
    const y_scale = 4
    if not mode(5)
	oserror(0, "Bad mode")
    fin
    time(@start)
    puts("Start\n")
    for x = 1*x_scale to 100*x_scale step x_scale
	for y = 1*y_scale to 100*y_scale step y_scale
	    plot(x, y)
	next
    next
    puts("Finish\n")
    time(@finish)
    log_time(@grafscrnstr)
end

// This isn't quite a literal translation of the benchmark in the magazine, but
// this is necessary to avoid problems with the string pool.
def store()
    word i, file
    time(@start)
    puts("Start\n")
    file = fopen_heap(256, "X.TEST", "w")
    if file == 0
	oserror(0, "Can't open test file")
    fin
    for i = 1 to 1000
	// TODO: The benchmark specifies "record handling"; is this reasonable?
	// I think I'd write it like this in C on any platform, but it's
	// not the same as the BBC BASIC benchmark in pcw.bas...
	if fputs(@storelinestr, file) == EOF
	    fclose(file)
	    oserror(0, "Error writing test file")
	fin
    next
    if fclose(file) == EOF
	oserror(0, "Can't close test file")
    fin
    oscli("DELETE X.TEST")
    puts("Finish\n")
    time(@finish)
    log_time(@storestr)
end

mode(7)
intmath16()
intmath32()
textscrn()
grafscrn()
mode(7)
store()
show_times()
done

// vi: sts=4 sw=4
