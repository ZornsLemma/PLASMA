include "inc/cmdsys.plh"
include "inc/cmdsysac.plh"
include "inc/testlib.plh"
include "inc/acornc.plh"

// TODO: Might be nicer to use heap-allocated storage for demo purposes to show it's not corrupted
export word size = 20
export word array[20]
export word result
export word column = 0

const vdu_cls = 12

word acrndnum = 12345

word i

def acrnd
  byte block[5]
  call(osword, osword_read_time, @block, @block >> 8, 0)
  acrndnum = acrndnum ^ block:0
  acrndnum = acrndnum * 31421 + 6927
  return acrndnum & $7FFF
end

// We don't check the return value of mode(); if it fails we just continue and
// accept the output may be unreadable.
mode(131)

// TODO: Might be nicer to shuffle the numbers 0-(size-1) rather than use random values
for i = 0 to size - 1
    array[i] = acrnd() % size
next

// TODO: Would be good to check for a failure in modexec() return code
result = 0
while not result
    // Uncommenting this heapalloc() shows that this top-level module can
    // allocate heap space and have it retained; the heapmark value printed
    // increases by 100 each time.
    // heapalloc(100)

    modexec("SORT1")
    // Print heapmark() to show it doesn't change, i.e. each modexec()
    // frees the memory it used before it returns.
    puts("heapmark: ")
    puti(heapmark())
    putln()
    modexec("SORT2")
loop
done
