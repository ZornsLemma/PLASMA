// Experimental C-style stdio and test/demonstration code
// TODO: If this works, the stdio functionality should be moved into
// a separate module.

// TODO: ungetc()

// TODO: ftell()/ftell32()

// TODO: rewind()?

// TODO: feof()

// TODO: ferror()?

// TODO: could produce an alternate stdio implementation which is a thin
// wrapper around the OS calls. If do that, compare performance with this
// one and if this is slower then either ditch it or fix the problem!

// TODO: Careful because BeebWiki says if file is extended the contents are undefined unless written to

// TODO: fread()/fwrite() - these should be able to do fast memcpy
// into/out of the buffer where possible

// TODO: convenience wrapper for fopen() which heapallocs() and initialises?
// Maybe rename fopen() as fopen_not_quite_sure_what() and use fopen() for the
// convenience function? I would like to leave the door open for an fopen()
// wrapper which uses a malloc-like library as another option. Maybe I should
// use fopen_placement() (?) for the real fn which does the work, then I can
// have fopen_heap() and (later) fopen_malloc() as the wrapper functions. The
// wrapper functions will of course need an argument specifying the buffer
// size, probably in the same position the _placement one takes the FILE *.

include "inc/acornos.plh"
include "inc/cmdsys.plh"
include "inc/dword.plh"
include "inc/testlib.plh"

const TRUE = -1
const FALSE = 0

const EOF = -1
const SEEK_SET = 0

const scratch = $79

const default_chunk_size = 256

// Note that the buffer size is a word; this means that an application can
// choose to allocate virtually the entire heap as a buffer for a single file
// if it wishes.
struc t_FILE
    byte r_handle
    byte r_eof // TODO: possibly 'flags' not just 'eof'? note that currently this means EOF *for OSGBPB* but not that we've returned all bytes via fgetc()
    byte r_append // TODO: move into flags byte?
    word r_buffer_used
    word r_buffer_size
    word r_buffer_dirty_low
    word r_buffer_dirty_high
    word r_chunk_size
    byte r_buffer_file_ptr[4]
    byte r_file_ptr[4]
    byte r_buffer // buffer_size bytes
end

byte stdout_handle = 0 // TODO private
word stdout = @stdout_handle // TODO export this

// TODO: Move this global into the DWORD module? Note it is initialised below
// TODO: Alternatively, perhaps just provide a dword_inc() and dword_dec()?
byte dword_one[4]

// TODO TEMP
def prword(w)
    prbyte(w >> 8)
    prbyte(w)
end

// TODO: COMMENT OUT IN FINAL VSN
def debug_dump_file(prefix, file)
    puts(prefix)
    puts(": "); prbyte(file->r_handle)
    putc('/'); prword(file + r_buffer)
    puts(", f/bptr "); prword(file=>r_file_ptr:2); prword(file=>r_file_ptr:0)
    putc('/'); prword(file=>r_buffer_file_ptr:2); prword(file=>r_buffer_file_ptr:0)
    puts(", bs/u "); prword(file=>r_buffer_size)
    putc('/'); prword(file=>r_buffer_used)
    puts(", dl/h "); prword(file=>r_buffer_dirty_low)
    putc('/'); prword(file=>r_buffer_dirty_high)
    putln()
end

// TODO: COMMENT OUT IN FINAL VSN
def debug_dump_osgbpb(a, block)
    puts("OSGBPB "); prbyte(a)
    puts(": "); prbyte(block->0)
    puts(", addr "); prword(block=>3); prword(block=>1)
    puts(", size "); prword(block=>7); prword(block=>5)
    puts(", fptr "); prword(block=>11); prword(block=>9)
    putln()
end

// TODO: PUT THIS IN DWORD LIBRARY?
// void dword_adduword(dword *result, const dword *lhs, word rhs)
def dword_adduword(result, lhs, rhs)
    dword_fromuword(result, rhs)
    return dword_add(result, result, lhs)
end

// TODO: MAKE THIS A STD LIBRARY FUNCTION?
def minu(lhs, rhs)
    if isult(lhs, rhs)
	return lhs
    else
	return rhs
    fin
end

// TODO: INTERNAL, DON'T EXPORT
// void get_length(dword *length, int handle)
def get_length(length, handle)
    // TODO: AUG says OSARGS control block is always in I/O processor memory!?
    call(2, scratch, handle, 0, $FFDA)
    memcpy(length, scratch, 4)
end

// TODO BENCHMARK IT, BUT MAY WANT TO WRITE THE 'IN MEMORY' BRANCH OF FGETC AND
// FPUTC IN ASSEMBLER - BUT DON'T GO NUTS, BECAUSE ASSEMBLER ALWAYS BURNS
// MAIN RAM, WHEREAS BYTECODE CAN BE IN SWR ON PLAS128

// TODO: RETURN TYPE IS POSSIBLY NOT BOOL, IT'S POSSIBLY 'file or 0'
// void fopen(FILE *file, const char *filename, const char *mode)
def fopen(file, filename, mode)
    byte base_mode, update, i, c, osfind_mode, handle
    // PLASMA interprets '\n' as an ASCII CR, not an LF, so we don't need to
    // perform any translation for text files. TODO: WE SHOULD HOWEVER
    // TODO: error handling
    base_mode = 'r'
    update = FALSE
    for i = 1 to ^mode
	c = (mode).[i]
	if c == 'r' or c == 'w' or c == 'a'
	    base_mode = c
	elsif c == '+'
	    update = TRUE
	fin
	// We ignore anything else, including 'b' - PLASMA's '\n' is
	// ASCII CR (13) which is exactly what we want so text and
	// binary modes are equivalent.
    next
    file->r_append = (base_mode == 'a')
    when base_mode
	is 'r'
	    if update
		osfind_mode = osfind_update
	    else
		osfind_mode = osfind_input
	    fin
	    break
	is 'w'
	    osfind_mode = osfind_output
	    break
	is 'a'
	    osfind_mode = osfind_update
	    break
    wend
    handle = osfind_open(osfind_mode, filename)
    if base_mode == 'w' and update and handle <> 0
	// "w+" must truncate the file if it exists; we opened it in write
	// mode to get this behaviour, we now need to re-open it in update
	// mode.
	osfind_close(handle)
	handle = osfind_open(osfind_update, filename)
    elsif file->r_append and handle == 0
	// "a" must create the file if it doesn't exist but OSFIND's update
	// mode doesn't ever create the file, so we do it explicitly if the
	// open failed.
	handle = osfind_open(osfind_output, filename)
	if handle == 0
	    return 0
	fin
	osfind_close(handle)
	handle = osfind_open(osfind_update, filename)
    fin
    if handle == 0
	return 0
    fin

    file->r_handle = handle
    file->r_eof = FALSE
    file=>r_chunk_size = minu(file=>r_buffer_size, default_chunk_size)
    file=>r_buffer_dirty_low = $FFFF
    file=>r_buffer_dirty_high = $0000
    file=>r_buffer_used = 0
    dword_fromuword(file + r_file_ptr, 0)
    dword_fromuword(file + r_buffer_file_ptr, 0)
    debug_dump_file("fopen->", file)
    return file
end

// word fflush(FILE *file) - returns 0 on success, EOF on error
// TODO: CURRENTLY THIS NEVER RETURNS EOF
def fflush(file)
    byte block[13]
    //debug_dump_file("fflush-<", file)
    if isult(file=>r_buffer_dirty_low, file=>r_buffer_dirty_high)
	block.0 = file->r_handle
	block:1 = file + r_buffer + file=>r_buffer_dirty_low
	block:3 = 0 // TODO
	block:5 = file=>r_buffer_dirty_high - file=>r_buffer_dirty_low
	block:7 = 0
	dword_adduword(@block + 9, file + r_buffer_file_ptr, file=>r_buffer_dirty_low)
	debug_dump_osgbpb(1, @block)
	call(1, @block, @block >> 8, 0, $FFD1) // TODO: BRK on error or can it return something?
	file=>r_buffer_dirty_low = $FFFF
	file=>r_buffer_dirty_high = $0000
	// TODO: What if anything should this do with r_eof?
	debug_dump_file("fflush->", file)
    fin
    return 0
end

// word fgetc(FILE *file)
// TODO ERROR HANDLING (NOT JUST EOF)
// TODO: magic constants everywhere
def fgetc(file)
    byte c
    byte block[13]
    byte buffer_used_ptr[4], buffer_end_ptr[4]
    word read_size
    //debug_dump_file("fgetc-<", file)
    dword_adduword(@buffer_used_ptr, file + r_buffer_file_ptr, file=>r_buffer_used)
    if dword_isuge(file + r_file_ptr, file + r_buffer_file_ptr) and dword_isult(file + r_file_ptr, @buffer_used_ptr))
	c = ^(file + r_buffer + file=>r_file_ptr:0 - file=>r_buffer_file_ptr:0)
	dword_add(file + r_file_ptr, file + r_file_ptr, @dword_one)
	debug_dump_file("fgetc->", file)
	return c
    else
	if file->r_eof
	    return EOF
	fin
	// TODO: careful if this handles EOF occurring at this point
	// The relevant byte isn't in the buffer, so we're going to need to
	// read some data into the buffer. If the client has used fseek() to
	// move the pointer ahead, this may involve reading the data between
	// the current end of the buffer and the new pointer.
	dword_adduword(@buffer_end_ptr, file + r_buffer_file_ptr, file=>r_buffer_size)
	read_size = 0
	// The buffer might not be full, so we may have room to read the required
	// data without flushing it. 
	if dword_isuge(file + r_file_ptr, file + r_buffer_file_ptr) and dword_isult(file + r_file_ptr, @buffer_end_ptr)
	    // The buffer is large enough to read enough additional data to
	    // read the required byte. How many bytes would we need to read to
	    // get that byte into the buffer?
	    read_size = (1 + file=>r_file_ptr:0 - file=>r_buffer_file_ptr:0) - file=>r_buffer_used
	    // However, we always read at least r_chunk_size bytes.
	    if read_size < file=>r_chunk_size
		read_size = file=>r_chunk_size
		// Is the buffer large enough for this newly increased read size?
		if not dword_isult(file=>r_buffer_used + read_size, file=>r_buffer_size)
		    read_size = 0 // no, it isn't
		fin
	    fin
	fin
	if read_size == 0
	    // We're going to discard the current buffer contents and start
	    // again.
	    if fflush(file) == EOF
		return EOF
	    fin
	    // TODO: create a dword_assign rather than using these :0 and :2 pairs in various places?
	    file=>r_buffer_file_ptr:0 = file=>r_file_ptr:0
	    file=>r_buffer_file_ptr:2 = file=>r_file_ptr:2
	    file=>r_buffer_used = 0
	    read_size = file=>r_chunk_size
	fin

	// Actually do the read
	block.0 = file->r_handle
	block:1 = file + r_buffer + file=>r_buffer_used
	block:3 = 0 // TODO: what to do with high order to get correct behaviour in all cases?
	block:5 = read_size
	block:7 = 0
	dword_adduword(@block + 9, file + r_buffer_file_ptr, file=>r_buffer_used)
	// We ignore the carry returned by OSGBPB; BeebWiki says it's not
	// returned consistently, so we just use the updated number of bytes.
	debug_dump_osgbpb(3, @block)
	call(3, @block, @block >> 8, 0, $FFD1)
	file=>r_buffer_used = file=>r_buffer_used + read_size - block:5
	if block:5 <> 0
	    file->r_eof = TRUE
	fin
	debug_dump_file("fgetc-!", file)
	return fgetc(file)
    fin
end

// word fputc(char c, FILE *file) - returns c on success, EOF on error
def fputc(c, file)
    byte buffer_end_ptr[4]
    word index
    // TODO: Perhaps just use 'file == 0' as the stdout indicator? Would save
    // a bit of setup, and the reality is the current approach is still likely
    // to fail if someone incorrectly passes stdout to another function as
    // stdout is not a full FILE structure with all the fields
    if file->r_handle == 0
	putc(c)
	if c == '\n' // TODO: use OSASCI, ideally via assembly
	    putc('\r')
	fin
	return c
    fin
    //debug_dump_file("fputc-<", file)
    if file->r_append
	get_length(file + r_file_ptr, file->r_handle)
	// TODO: THIS IS SEEK-LIKE, FACTOR OUT COMMON CODE?
	// TODO: DOES THIS NEED TO DO ANYTHING WITH EOF FLAG?
    fin
    dword_adduword(@buffer_end_ptr, file + r_buffer_file_ptr, file=>r_buffer_size)
    if dword_isuge(file + r_file_ptr, file + r_buffer_file_ptr) and dword_isult(file + r_file_ptr, @buffer_end_ptr)
	index = file=>r_file_ptr:0 - file=>r_buffer_file_ptr:0
	^(file + r_buffer + index) = c
	dword_add(file + r_file_ptr, file + r_file_ptr, @dword_one)
	// TODO: In order to minimise problems if an app has (say) a 20K buffer
	// and modifies the first and last byte, we should probably have a
	// threshold and if writing this one byte would increase the dirty range
	// by more than the threshold, we should flush first.
	if isult(index, file=>r_buffer_dirty_low)
	    file=>r_buffer_dirty_low = index
	fin
	index++ // high watermark is exclusive
	if isugt(index, file=>r_buffer_dirty_high)
	    file=>r_buffer_dirty_high = index
	fin
	if isugt(index, file=>r_buffer_used)
	    file=>r_buffer_used = index
	fin
	debug_dump_file("fputc->", file)
	return c
    else
	if fflush(file) == EOF
	    return EOF
	fin
	file=>r_buffer_file_ptr:0 = file=>r_file_ptr:0
	file=>r_buffer_file_ptr:2 = file=>r_file_ptr:2
	file=>r_buffer_used = 0
	debug_dump_file("fputc-!", file)
	return fputc(c, file)
    fin
end

// TODO: DO WE NEED TO ZERO-FILL THE BUFFER WHERE OUR SEEK EXTENDS THE FILE?
// word fseek(FILE *file, word offset, word origin) - returns 0 on success, non-0 on error
// TODO: CURRENTLY NO SUPPORT FOR origin - ASSUMED TO BE SEEK_SET
// TODO: IDEALLY WE SHOULD HAVE A DWORD VERSION (fseek32) FOR FILES >64K OR SOME MEANS TO SUPPORT THIS ANYWAY
def fseek(file, offset, origin)
    dword_fromuword(file + r_file_ptr, offset)
    file->r_eof = FALSE
    debug_dump_file("fseek->", file)
    return 0 // TODO: CURRENTLY CAN'T RETURN ANYTHING ELSE
end

// word fclose(FILE *file) - returns 0 on success, EOF on error
// TODO: can this return errors or will we always get an OS error?
def fclose(file)
    word result
    debug_dump_file("fclose-<", file)
    if fflush(file) == EOF
	return EOF
    fin
    osfind_close(file->r_handle)
    return 0
end

def main()
    byte file[32]
    word i
    word count
    file:r_buffer_size = 2 
    puts("foo\nbar\nbaz\n")
    fputc('x', stdout)
    fputc('y', stdout)
    fputc('\n', stdout)
    i = fopen(@file, "TEST", "w+b")
    if i == 0
	puts("open failed")
	return
    fin
    i = fputc('X', @file)
    i = fputc('Y', @file)
    puts("DOINGZ\n")
    i = fputc('Z', @file)
    puts("DONEZ\n")
    i = fseek(@file, 2, SEEK_SET)
    if i <> 0
	puts("fseek failed")
	return
    fin
    puts("about to fget Z\n")
    i = fgetc(@file)
    if i <> 'Z'
	puts("fgetc failed")
	return
    fin
    puts("fgot Z\n")
    i = fseek(@file, 0, SEEK_SET)
    if i <> 0
	puts("fseek failed")
	return
    fin
    i = fgetc(@file)
    if i <> 'X'
	puts("fgetc2 failed")
	return
    fin
    puts("about to write Q\n")
    i = fputc('Q', @file)
    i = fclose(@file)
    if i == EOF
	puts("close failed")
	return
    fin
    return



    i = fopen(@file, "HELLO", "rb")
    if i == 0
	puts("open failed")
	return
    fin
    count = 0
    repeat
	if count % 8 == 0
	    putln()
	    prword(count)
	    putc(' ')
	fin
	i = fgetc(@file)
	if i <> EOF
	    prbyte(i)
	    putc(' ')
	fin
	count++
    until i == EOF
    i = fclose(@file)
    if i == EOF
	puts("close failed")
	return
    fin
end

dword_fromuword(@dword_one, 1)

main()
done

// TODO: temp-ish notes 
//
// the full buffer_size bytes don't need to be present in the buffer, but the
// only partially filled state supported if that the buffer contains
// buffer_used bytes of data which are the file contents starting from
// buffer_file_ptr
//
// this means that if you seek forward but still within the area covered by
// [buffer_file_ptr, buffer_ptr_ptr + buffer_size), the read will have to read
// all the intervening data into the buffer as well

// vi: sts=4 sw=4
