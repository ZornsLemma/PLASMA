// Experimental C-style stdio and test/demonstration code
// TODO: If this works, the stdio functionality should be moved into
// a separate module.

include "inc/acornos.plh"
include "inc/cmdsys.plh"
include "inc/testlib.plh"

const TRUE = -1
const FALSE = 0

const EOF = -1
const SEEK_SET = 0

struc t_FILE
    byte r_handle
    byte r_eof // TODO: possibly 'flags' not just 'eof'? note that currently this means EOF *for OSGBPB* but not that we've returned all bytes via fgetc()
    byte r_dirty // TODO: possibly part of a 'flags' byte
    word r_buffer_index // TODO: byte?
    word r_buffer_used // TODO: byte?
    word r_buffer_size // TODO: byte?
    word r_file_ptr // TODO: dword? rename?
    byte r_buffer // buffer_size bytes
end

// TODO TEMP
def prword(w)
    prbyte(w >> 8)
    prbyte(w)
end

// TODO: RETURN TYPE IS POSSIBLY NOT BOOL, IT'S POSSIBLY 'file or 0'
// void fopen(FILE *file, const char *filename, const char *mode)
def fopen(file, filename, mode)
    byte osfind_mode
    // TODO: write support, non-binary support?
    // TODO: error handling
    // TODO: very poor parsing of mode
    // TODO: this ignores the subtleties of w+ vs r+ vs a+
    if ^mode == 2 and ^(mode + 2) == '+'
	osfind_mode = osfind_update
    elsif ^(mode + 1) == 'r'
	osfind_mode = osfind_input
    elsif ^(mode + 1) == 'w'
	osfind_mode = osfind_output
    fin
    file->r_handle = osfind_open(osfind_mode, filename)
    if file->r_handle == 0
	return 0
    fin
    file->r_eof = FALSE
    file->r_dirty = FALSE
    file=>r_buffer_index = 0
    file=>r_buffer_used = 0
    file=>r_file_ptr = 0
    // TODO: We probably need to record if the file is currently being used for input or output and if the buffer is dirty
    return file
end

// word fgetc(FILE *file)
// TODO ERROR HANDLING (NOT JUST EOF)
def fgetc(file)
    word buffer_index, c, osgbpb_flags
    byte block[13]
    buffer_index = file=>r_buffer_index
    if buffer_index < file=>r_buffer_used
	c = ^(file + r_buffer + buffer_index)
	file=>r_buffer_index = buffer_index + 1
	return c
    else
	if file->r_eof
	    return EOF
	fin
	// TODO: careful if this handles EOF occurring at this point
	file=>r_buffer_index = 0
	// TODO: magic constants!
	// TODO: this uses the OS file pointer, do we want that?
	block.0 = file->r_handle
	block:1 = file + r_buffer
	block:3 = 0 // TODO: what to do with high order to get correct behaviour in all cases?
	block:5 = file=>r_buffer_size
	block:7 = 0
	block:9 = file=>r_file_ptr
	block:11 = 0 // TODO
	// TODO puts("CALLING OSGBPB\n")
	// We ignore the carry returned by OSGBPB; BeebWiki says it's not
	// returned consistently, so we just use the updated number of bytes.
	call(3, @block, @block >> 8, 0, $FFD1)
	file=>r_file_ptr = block:9
	file=>r_buffer_used = file=>r_buffer_size - block:5
	if block:5 > 0
	    file->r_eof = TRUE
	fin
	return fgetc(file)
    fin
end

// word fflush(FILE *file) - returns 0 on success, EOF on error
// TODO: CURRENTLY THIS NEVER RETURNS EOF
// TODO: MIGHT WANT TO BE CLEVERER AND HANG ON TO OUR BUFFER AFTER WRITING IT, JUST CLEAN
def fflush(file)
    // TODO: Does this need to consider r_buffer_used?
    byte block[13]
    if not file->r_dirty
	return 0
    fin
    block.0 = file->r_handle
    block:1 = file + r_buffer
    block:3 = 0 // TODO
    block:5 = file=>r_buffer_index
    block:7 = 0
    block:9 = file=>r_file_ptr
    block:11 = 0 // TODO
    call(1, @block, @block >> 8, 0, $FFD1) // TODO: BRK on error or can it return something?
    file=>r_file_ptr = block:9
    file=>r_buffer_index = 0
    file->r_dirty = FALSE
    return 0
end

// TODO: we may want to try to be clever and avoid flushing if we fseek() within the current byte range held in our buffer

// word fputc(char c, FILE *file) - returns c on success, EOF on error
def fputc(c, file)
    word buffer_index
    buffer_index = file=>r_buffer_index
    if buffer_index < file=>r_buffer_size
	^(file + r_buffer + buffer_index) = c
	file=>r_buffer_index = buffer_index + 1
	file->r_dirty = TRUE
	// TODO: any need to update r_buffer_used?
	return c
    else
	if fflush(file) == EOF
	    return EOF
	fin
	return fputc(c, file)
    fin
end

// word fseek(FILE *file, word offset, word origin) - returns 0 on success, non-0 on error
// TODO: CURRENTLY NO SUPPORT FOR origin - ASSUMED TO BE SEEK_SET
// TODO: IDEALLY WE SHOULD HAVE A DWORD VERSION FOR FILES >64K OR SOME MEANS TO SUPPORT THIS ANYWAY
def fseek(file, offset, origin)
    // TODO MIGHT WANT TO BE CLEVERER IF SEEK POSITION IS WITHIN CURRENT BUFFER
    if fflush(file) == EOF
	return EOF
    fin
    file=>r_file_ptr = offset
end

// word fclose(FILE *file) - returns 0 on success, EOF on error
// TODO: can this return errors or will we always get an OS error?
def fclose(file)
    word result
    if fflush(file) == EOF
	return EOF
    fin
    osfind_close(file->r_handle)
    return 0
end

def main()
    byte file[20]
    word i
    word count
    file:r_buffer_size = 2
    i = fopen(@file, "TEST", "w+b")
    if i == 0
	puts("open failed")
	return
    fin
    i = fputc('X', @file)
    i = fputc('Y', @file)
    i = fputc('Z', @file)
    i = fseek(@file, 0, SEEK_SET)
    if i <> 0
	puts("fseek failed")
	return
    fin
    i = fgetc(@file)
    if i <> 'X'
	puts("fgetc failed")
	return
    fin
    i = fseek(@file, 0, SEEK_SET)
    if i <> 0
	puts("fseek failed")
	return
    fin
    i = fputc('Q', @file)
    i = fclose(@file)
    if i == EOF
	puts("close failed")
	return
    fin
    return



    i = fopen(@file, "HELLO", "rb")
    if i == 0
	puts("open failed")
	return
    fin
    count = 0
    repeat
	if count % 8 == 0
	    putln()
	    prword(count)
	    putc(' ')
	fin
	i = fgetc(@file)
	if i <> EOF
	    prbyte(i)
	    putc(' ')
	fin
	count++
    until i == EOF
    i = fclose(@file)
    if i == EOF
	puts("close failed")
	return
    fin
end

main()
done

// vi: sts=4 sw=4
