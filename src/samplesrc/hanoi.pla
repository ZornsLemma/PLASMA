include "inc/cmdsys.plh"
include "inc/cmdsysac.plh"
include "inc/testlib.plh"
include "inc/acornos.plh"
include "inc/acornc.plh"

const animate = 1

word discs
word height[3]
word move_num

asm equates
    BBC = 1
    !SOURCE "vmsrc/plvmzp.inc"
end

asm sync
    DEX
    STX	ESP
    LDA #19
    JSR $FFF4
    LDX ESP
    RTS
end

def fx(a, x)
    call(osbyte, a, x, 0, 0)
end

def time(t)
    call(osword, osword_read_time, t, t >> 8, 0)
end

def sleep(cs)
    byte time1[5], time2[5]
    word delta
    time(@time1)
    repeat
	time(@time2)
	delta = time2[0] - time1[0]
	if delta < 0
	    delta = delta + 256
	fin
    until delta >= cs
end

def peg_x(peg)
    return 2 + 12 * peg
end

def height_y(n)
    return 20 - n
end

def peg_y(peg)
    return height_y(height[peg])
end

def cursor(state)
    word i
    putc(23)
    putc(1)
    putc(state)
    for i = 1 to 7
	putc(0)
    next
end

def tab(x, y)
    putc(31)
    putc(x)
    putc(y)
end

def title()
    word i
    putc(12)
    for i = 0 to 1
	tab(8, i)
	putc(141)
	putc(132)
	putc(157)
	putc(135)
	puts("Towers of Hanoi  ")
	putc(156)
    next
end

def plot_peg_line()
    putc(151)
    puts("     ")
    putc(53)
    puts("     ")
end

def plot_peg(peg)
    word x, y, i
    x = peg_x(peg)
    y = height_y(0) - 1

    tab(x + 6, y + 2)
    putc('A' + peg)

    tab(x, y + 1)
    putc(151)
    for i = 0 to 9 
	putc(96)
    next
    putc(33)
    
    while y >= height_y(discs) - 1
	tab(x, y)
	plot_peg_line()
	y--
    loop
end

def plot_disc(disc, x, y)
    word width_pixels, gap_pixels
    tab(x, y)
    putc(145 + disc)
    width_pixels = 7 + disc * 2
    gap_pixels = (21 - width_pixels) / 2
    while gap_pixels >= 2
	putc(' ')
	gap_pixels = gap_pixels - 2
    loop
    while width_pixels > 0
	if gap_pixels == 1
	    putc(106)
	    gap_pixels = 0
	    width_pixels--
	elsif width_pixels == 1
	    putc(53)
	    width_pixels = 0
	else
	    putc(255)
	    width_pixels = width_pixels - 2
	fin
    loop
end

def erase_disc(x, y)
    if y >= height_y(discs) - 1
	tab(x, y)
	sync()
	plot_peg_line()
    else
	tab(x + 1, y)
	sync()
	puts("           ")
    fin
end

def add_disc(disc, peg)
    word i
    height[peg]++
    sync()
    plot_disc(disc, peg_x(peg), peg_y(peg)))
end

def remove_disc(disc, peg)
    word x, y
    x = peg_x(peg)
    y = peg_y(peg)
    tab(x, y)
    erase_disc(x, y)
    height[peg]--
end

def min(a, b)
    if a < b
	return a
    else
	return b
    fin
end

def max(a, b)
    if a < b
	return b
    else
	return a
    fin
end

def move_disc_animated(disc, source, dest)
    word i, min_y, y, x, dest_x, dx, dest_y

    height[dest]++

    min_y = height_y(discs) - 3

    x = peg_x(source)
    y = peg_y(source)
    while y > min_y
	erase_disc(x, y)
	y--
	plot_disc(disc, x, y)
	sleep(5)
    loop
    height[source]--

    dest_x = peg_x(dest)
    if dest_x > x
	dx = 1
    else
	dx = -1
    fin
    while x <> dest_x
	erase_disc(x, y)
	x = x + dx
	plot_disc(disc, x, y)
	sleep(5)
    loop

    dest_y = peg_y(dest)
    while y < dest_y
	erase_disc(x, y)
	y++
	plot_disc(disc, x, y)
	sleep(5)
    loop
end

def move_disc(disc, source, dest)
    tab(0, 3)
    puti(move_num)
    move_num++
    puts(") Move disc ")
    puti(disc + 1)
    puts(" from peg ")
    putc('A' + source)
    puts(" to peg ")
    putc('A' + dest)
    puts("...")
    if animate
	move_disc_animated(disc, source, dest)
    else
	remove_disc(disc, source)
	add_disc(disc, dest)
	sleep(100)
    fin
end

def move_tower(disc, source, dest, spare)
    if disc == 0
	move_disc(disc, source, dest)
    else
	move_tower(disc - 1, source, spare, dest)
	move_disc(disc, source, dest)
	move_tower(disc - 1, spare, dest, source)
    fin
end

def solve()
    word i
    cursor(0)
    title()
    for i = 0 to 2
	height[i] = 0
	plot_peg(i)
    next
    for i = discs - 1 downto 0
	add_disc(i, 0)
    next
    move_num = 1
    move_tower(discs - 1, 0, 1, 2)
    tab(0,3);
    for i = 0 to 39
	putc(' ')
    next
    tab(0, 24)
    puts("Press SPACE...")
    fx(osbyte_flush_buffer, buffer_keyboard)
    repeat until call_osrdch() == ' '
    cursor(1)
end

def main()
    mode(7) // TODO: don't ignore return code?
    while 1
	title()
	tab(0, 3) 
	puts("How many discs (3-7) or Q to quit? ")
	repeat
	    discs = call_osrdch()
	    if discs == 'Q' or discs == 'q'
		return
	    fin
	until discs >= '3' and discs <= '7'
	discs = discs - '0'
	solve()
    loop
end

fx(osbyte_rw_escape_status, 1)
main()
tab(0,5)
fx(osbyte_rw_escape_status, 0)
done

// vi: sts=4 sw=4
