// This program dumps out the symbol table for debugging purposes; normal
// programs shouldn't need to do this and would break if the symbol table
// format changed.

include "inc/cmdsys.plh"
include "inc/acornc.plh"

// We don't want to use these, but they make the symbol table more
// interesting...
include "inc/testlib.plh"
include "inc/acornos.plh"

// The first chunk of the symbol table is in the VM code at an address we can't
// know; we hunt through memory looking for CMDSYS, which isn't reliable but
// is fine for this debug/demonstration code.
word initialsymtbl
const max_symbol_length = 17 // module names can be 16 chars plus # prefix

byte cmdsysdci = $c3, $cd, $c4, $d3, $d9, $53 

word chunk
word symbol
word pad

def memcmp(lhs, rhs, n)#1
    while n > 0
        if ^lhs <> ^rhs
            return FALSE
        fin
        lhs++
        rhs++
        n--
    loop
    return TRUE
end

initialsymtbl = call(osbyte, osbyte_read_oshwm, 0, 0, 0):1
while not memcmp(initialsymtbl, @cmdsysdci, 6)
    initialsymtbl++
loop

chunk = initialsymtbl
puts("chunk elem symbol            address\n")
symbol = chunk
while ^symbol
    if ^symbol == 1
        chunk = symbol=>1
        symbol = chunk
        continue
    fin
        
    if symbol == chunk
        puth(symbol)
        puts("  ")
    else
        puts("      ")
    fin

    puth(symbol)
    putc(' ')

    pad = max_symbol_length + 1
    while ^symbol & $80
        putc(^symbol & $7F)
        symbol++
        pad--
    loop
    putc(^symbol)
    symbol++
    pad--
    while pad > 0
        putc(' ')
        pad--
    loop

    puth(*symbol)
    symbol = symbol + 2

    putln()
loop

putln()
puts("heapavail: $")
puth(heapavail())
putln()

done

// vi: sw=4 sts=4
