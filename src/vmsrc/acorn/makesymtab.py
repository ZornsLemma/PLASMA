from __future__ import print_function

symtab = [
    ("CMDSYS", "@version"),
    ("CALL", "@call"),
    ("PUTC", "@putc"),
    ("PUTLN", "@putln"),
    ("PUTS", "@puts"),
    ("PUTB", "@putb"),
    ("PUTH", "@puth"),
    ("GETC", "@getc"),
    ("GETS", "@gets"),
    ("HEAPMARK", "@heapmark"),
    ("HEAPAVAIL", "@heapavail"),
    ("HEAPALLOC", "@heapalloc"),
    ("XHEAPALLOC", "@xheapalloc"),
    ("HEAPALLOCALIGN", "@heapallocalign"),
    ("HEAPRELEASE", "@heaprelease"),
    ("MEMSET", "@memset"),
    ("MEMCPY", "@memcpy"),
    ("STRCPY", "@strcpy"),
    ("STRCAT", "@strcat"),
    ("SEXT", "@sext"),
    ("ISUGT", "@isugt"),
    ("ISUGE", "@isuge"),
    ("ISULT", "@isult"),
    ("ISULE", "@isule"),
    ("MODLOAD", "@modload"), # SFTODO: DELETE??
    ("MACHID", "@machid"), # SFTODO: BE GOOD TO TEST THIS STILL WORKS...
    ("OSERROR", "@oserror"),
    ("CALL_OSCLI", "@call_oscli"),
    ("STOCR", "@stocr"),
    ("MODE", "@mode"),
    ("CALLALLOCA", "@callalloca"),
    ("MODNAME", "@modname"),
    ("DIVMOD", "@divmod"),
    ("PUTI", "@puti"),
    ("TOUPPER", "@toupper"),

    # On the Apple implementation, the longjmp module provides the except()
    # and throw() functions. On the Acorn implementation, these are built into
    # the core VM (as they're needed for OS error handling) and we therefore
    # provide a dummy longjmp symbol so modules with a dependency on longjmp
    # know it's already loaded and don't try to load it from disk.
    ("LONGJMP", "1"),
    ("EXCEPT", "@except"),
    ("EXCEPT2", "@except2"),
    ("THROW", "@throw"),
]

print("// AUTOGENERATED; DO NOT EDIT THIS FILE - edit makesymtab.py instead\n")

print("// Initial symbol table")
start = "byte symtbl[] = "
for (name, value) in symtab:
    s = start
    start = "byte = "
    sep = ""
    for i, c in enumerate(name):
        if i < len(name) - 1:
            b = ord(c) | 0x80
        else:
            b = ord(c)
        s += sep + ("$%2x" % b)
        sep = ", "
    print(s + "; word = " + value + " // " + name)

print("byte = $01 // end of symbol table chunk")
print("word = lowsymtblchunk // next symbol table chunk")
