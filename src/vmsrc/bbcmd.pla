// TODO: A lot of this is probably irrelevant and can be removed

const MODADDR      = $1000
const inbuff       = $700
const errnum       = $700
const errstr	   = $701
const freemem      = $0006
const errfp	   = $400
const errjb	   = $402
//
// System flags: memory allocator screen holes.
//
const restxt1     = $0001
const restxt2     = $0002
const resxtxt1    = $0004
const resxtxt2    = $0008
const reshgr1     = $0010
const reshgr2     = $0020
const resxhgr1    = $0040
const resxhgr2    = $0080
//
// Module don't free memory
//
const modkeep     = $1000
const modinitkeep = $2000
//
// CFFA1 addresses.
//
const CFFADest     = $00
const CFFAFileName = $02
const CFFAOldName  = $04
const CFFAFileType = $06
const CFFAAuxType  = $07
const CFFAFileSize = $09
const CFFAEntryPtr = $0B
//
// Pedefined functions.
//
predef crout, cout, prstr, cin, rdstr
predef call
predef markheap, allocheap, allocalignheap, releaseheap, availheap
predef memset, memcpy
predef uword_isgt, uword_isge, uword_islt, uword_isle
predef loadmod, execmod, lookupstrmod
predef setjmp, longjmp
predef prbyte
predef osfile, oscli
predef stocr
//
// System variables.
//
word version     = $0092 // 00.92
word systemflags = 0
word heap
word symtbl, lastsym
byte perr, refauto
//
// String pool.
//
byte autorun[]    = "AUTORUN"
byte verstr[]     = "\nPLASMA "
byte freestr[]    = "MEM FREE:$"
byte errorstr[]   = "ERR:$"
byte prompt[]     = "PLASMA"
byte okstr[]      = "OK"
byte huhstr[]     = "?\n"
byte hexchar[]    = '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
//
// Exported Machine ID.
//
byte machid       = $BB // Arbitrary value
//
// Command line pointer
//
word cmdptr       = @hexchar // make it point to a zero
//
// Standard Library exported functions.
//
byte syslibstr[]  = "CMDSYS"
byte machidstr[]  = "MACHID"
byte putcstr[]    = "PUTC"
byte putlnstr[]   = "PUTLN"
byte putsstr[]    = "PUTS"
byte getcstr[]    = "GETC"
byte getsstr[]    = "GETS"
byte callstr[]    = "CALL"
byte hpmarkstr[]  = "HEAPMARK"
byte hpalignstr[] = "HEAPALLOCALIGN"
byte hpallocstr[] = "HEAPALLOC"
byte hprelstr[]   = "HEAPRELEASE"
byte memsetstr[]  = "MEMSET"
byte memcpystr[]  = "MEMCPY"
byte uisgtstr[]   = "ISUGT"
byte uisgestr[]   = "ISUGE"
byte uisltstr[]   = "ISULT"
byte uislestr[]   = "ISULE"
byte loadstr[]    = "MODLOAD"
byte execstr[]    = "MODEXEC"
byte modadrstr[]  = "MODADDR"
byte argstr[]     = "ARGS"
byte setjmpstr[]  = "SETJMP"
byte longjmpstr[] = "LONGJMP"
byte prbytestr[]  = "PRBYTE"
byte osfilestr[]  = "OSFILE"
byte osclistr[]   = "OSCLI"
byte stocrstr[]   = "STOCR"
word exports[]	  = @callstr,   @call
word 		  = @putcstr,   @cout
word              = @putlnstr,  @crout
word		  = @putsstr,   @prstr
word		  = @getcstr,   @cin
word		  = @getsstr,   @rdstr
word		  = @hpmarkstr, @markheap
word		  = @hpallocstr,@allocheap
word		  = @hpalignstr,@allocalignheap
word		  = @hprelstr,  @releaseheap
word		  = @memsetstr, @memset
word		  = @memcpystr, @memcpy
word              = @uisgtstr,  @uword_isgt
word              = @uisgestr,  @uword_isge
word              = @uisltstr,  @uword_islt
word              = @uislestr,  @uword_isle
word              = @loadstr,   @loadmod
word              = @execstr,   @execmod
word              = @modadrstr, @lookupstrmod
word              = @machidstr, @machid
word              = @argstr,    @cmdptr
word		  = @setjmpstr, @setjmp
word		  = @longjmpstr,@longjmp
word		  = @prbytestr, @prbyte
word		  = @osfilestr, @osfile
word              = @osclistr,  @oscli
word		  = @stocrstr,  @stocr
word              = 0
word syslibsym    = @exports     
//
// CALL 6502 ROUTINE
// CALL(AREG, XREG, YREG, STATUS, ADDR)
//
asm call
REGVALS	=	SRC
        PHP
        LDA     ESTKL,X
        STA     TMPL
        LDA     ESTKH,X
        STA     TMPH
        INX
        LDA     ESTKL,X
        PHA
        INX
        LDY     ESTKL,X
        INX
        LDA     ESTKL+1,X
        PHA
        LDA     ESTKL,X
        INX
        STX     ESP
        TAX
        PLA
        PLP
        JSR     JMPTMP
        PHP
        STA     REGVALS+0
        STX     REGVALS+1
        STY     REGVALS+2
        PLA
        STA     REGVALS+3
        LDX     ESP
        LDA     #<REGVALS
        LDY     #>REGVALS
        STA     ESTKL,X
        STY     ESTKH,X
        PLP
        RTS
JMPTMP	JMP	(TMP)
end
//
// QUIT TO PREVIOUS LANGUAGE
// TODO: Obviously not suitable if this gets turned into a language ROM itself...
//
asm quit
	LDA	#$FC
	LDX	#0
	LDY	#$FF
	JSR	$FFF4
	LDA	#$8E
	JSR	$FFF4
end
//
// SET MEMORY TO VALUE
// MEMSET(ADDR, VALUE, SIZE)
//   With optimizations from Peter Ferrie
//
asm memset
	LDA     ESTKL+2,X
	STA     DSTL
	LDA     ESTKH+2,X
	STA     DSTH
	LDY     ESTKL,X
	BEQ     +
	INC     ESTKH,X
	LDY     #$00
+	LDA     ESTKH,X
	BEQ     SETMEX
SETMLPL	CLC
	LDA     ESTKL+1,X
SETMLPH	STA     (DST),Y
	DEC     ESTKL,X
	BEQ     ++
-	INY
	BEQ     +
--	BCS     SETMLPL
	SEC
	LDA     ESTKH+1,X
	BCS     SETMLPH
+	INC     DSTH
	BNE     --
++	DEC     ESTKH,X
	BNE     -
SETMEX	INX
	INX
	RTS
end
//
// COPY MEMORY
// MEMCPY(DSTADDR, SRCADDR, SIZE)
//
asm memcpy
	INX
	INX
	LDA	ESTKL-2,X
	ORA	ESTKH-2,X
	BEQ	CPYMEX
	LDA	ESTKL-1,X
	CMP	ESTKL,X
	LDA	ESTKH-1,X
	SBC	ESTKH,X
 	BCC	REVCPY
;
; FORWARD COPY
;
	LDA	ESTKL,X
	STA 	DSTL
	LDA	ESTKH,X
	STA 	DSTH
	LDA	ESTKL-1,X
	STA 	SRCL
	LDA	ESTKH-1,X
	STA 	SRCH
	LDY	ESTKL-2,X
	BEQ	FORCPYLP
	INC 	ESTKH-2,X
	LDY	#$00
FORCPYLP LDA	(SRC),Y
	STA	(DST),Y
	INY
	BNE	+
	INC	DSTH
	INC	SRCH
+	DEC 	ESTKL-2,X
	BNE	FORCPYLP
	DEC	ESTKH-2,X
	BNE	FORCPYLP
	RTS
;
; REVERSE COPY
;
REVCPY	;CLC
	LDA 	ESTKL-2,X
	ADC	ESTKL,X
	STA	DSTL
	LDA	ESTKH-2,X
	ADC	ESTKH,X
	STA	DSTH
	CLC
	LDA 	ESTKL-2,X
	ADC	ESTKL-1,X
	STA	SRCL
	LDA	ESTKH-2,X
	ADC	ESTKH-1,X
	STA	SRCH
	DEC	DSTH
	DEC	SRCH
	LDY	#$FF
	LDA 	ESTKL-2,X
	BEQ	REVCPYLP
	INC 	ESTKH-2,X
REVCPYLP LDA	(SRC),Y
	STA	(DST),Y
	DEY
	CPY	#$FF
	BNE	+
	DEC	DSTH
	DEC	SRCH
+	DEC 	ESTKL-2,X
	BNE	REVCPYLP
	DEC	ESTKH-2,X
	BNE	REVCPYLP
CPYMEX	RTS
end
//
// Unsigned word comparisons.
//
asm uword_isge
	LDA	ESTKL+1,X
	CMP	ESTKL,X
	LDA	ESTKH+1,X
	SBC	ESTKH,X
	LDA	#$FF
	ADC	#$00
	EOR	#$FF
 	STA	ESTKL+1,X
	STA	ESTKH+1,X
	INX
	RTS
end
asm uword_isle
	LDA	ESTKL,X
	CMP	ESTKL+1,X
	LDA	ESTKH,X
	SBC	ESTKH+1,X
	LDA	#$FF
	ADC	#$00
	EOR	#$FF
 	STA	ESTKL+1,X
	STA	ESTKH+1,X
	INX
	RTS
end
asm uword_isgt
	LDA	ESTKL,X
	CMP	ESTKL+1,X
	LDA	ESTKH,X
	SBC	ESTKH+1,X
	LDA	#$FF
	ADC	#$00
 	STA	ESTKL+1,X
	STA	ESTKH+1,X
	INX
	RTS
end
asm uword_islt
	LDA	ESTKL+1,X
	CMP	ESTKL,X
	LDA	ESTKH+1,X
	SBC	ESTKH,X
	LDA	#$FF
	ADC	#$00
 	STA	ESTKL+1,X
	STA	ESTKH+1,X
	INX
	RTS
end
//
// Addresses of internal routines.
//
asm interp
	DEX
	LDA	#<IINTERP
	STA	ESTKL,X
	LDA	#>IINTERP
	STA	ESTKH,X
	RTS
end
// 
// A DCI string is one that has the high bit set for every character except the last.
// More efficient than C or Pascal strings.
//
//def dcitos(dci, str)
//    byte len, c
//    len = 0
//    repeat
//        c = (dci).[len]
//        len = len + 1
//        (str).[len] = c & $7F
//    until !(c & $80)
//    ^str = len
//    return len
//end
asm dcitos
	LDA	ESTKL,X
	STA	DSTL
	LDA	ESTKH,X
	STA	DSTH
	LDA	ESTKL+1,X
	STA	SRCL
	LDA	ESTKH+1,X
	STA	SRCH
	LDY	#$00
-	LDA	(SRC),Y
	CMP	#$80
	AND	#$7F
	INY
	STA	(DST),Y
	BCS	-
	TYA
	LDY	#$00
	STA	(DST),Y
	INX
	STA	ESTKL,X
	STY	ESTKH,X
	RTS
end
//def stodci(str, dci)
//    byte len, c
//    len = ^str
//    if len == 0
//        return
//    fin
//    c = toupper((str).[len]) & $7F
//    len = len - 1
//    (dci).[len] = c
//    while len
//    	c = toupper((str).[len]) | $80
//    	len = len - 1
//    	(dci).[len] = c
//    loop
//    return ^str
//end
asm stodci
	LDA	ESTKL,X
	STA	DSTL
	LDA	ESTKH,X
	STA	DSTH
	LDA	ESTKL+1,X
	STA	SRCL
	LDA	ESTKH+1,X
	STA	SRCH
	INX
	LDY	#$00
	LDA	(SRC),Y
	BEQ	++
	TAY
	LDA	(SRC),Y
	JSR	TOUPR
	BNE	+
-	LDA	(SRC),Y
	JSR	TOUPR
	ORA	#$80
+	DEY
	STA	(DST),Y
	BNE	-
	LDA	(SRC),Y
++	STA	ESTKL,X
	STY	ESTKH,X
	RTS
end
asm toupper
	LDA     ESTKL,X
TOUPR	AND     #$7F
	CMP     #'a'
	BCC     +
	CMP     #'z'+1
	BCS     +
	SBC     #$1F
+	STA     ESTKL,X
	RTS
end
//
// Module symbols are entered into the symbol table
// pre-pended with a '#' to differentiate them
// from normal symbols.
//
//def modtosym(mod, dci)
//    byte len, c
//    (dci).0 = '#'|$80
//    len = 0
//    repeat
//        c = (mod).[len]
//        len = len + 1
//        (dci).[len] = c
//    until !(c & $80)
//    return dci
//end
asm modtosym
	LDA	ESTKL+1,X
	STA	SRCL
	LDA	ESTKH+1,X
	STA	SRCH
	LDA	ESTKL,X
	STA	ESTKL+1,X
	STA	DSTL
	LDA	ESTKH,X
	STA	ESTKH+1,X
	STA	DSTH
	INX
	LDY	#$00
	LDA	#'#'+$80
-	STA	(DST),Y
	ASL
	LDA	(SRC),Y
	INY
	BCS	-
	RTS
end
//
// Lookup routines.
//
//def lookuptbl(dci, tbl)
//    word match
//    while ^tbl
//        match = dci
//        while ^tbl == ^match
//            if !(^tbl & $80)
//                return (tbl):1
//            fin
//            tbl   = tbl   + 1
//            match = match + 1
//        loop
//        while (^tbl & $80)
//            tbl = tbl + 1
//        loop
//        tbl = tbl + 3
//    loop
//    return 0
asm lookuptbl
	LDA	ESTKL,X
	STA	DSTL
	LDA	ESTKH,X
	STA	DSTH
	LDA	ESTKL+1,X
	STA	SRCL
	LDA	ESTKH+1,X
	STA	SRCH
	LDY	#$00
-	LDA	(DST),Y
	BEQ	+
	CMP	(SRC),Y
	BNE	++
	INY
	ASL
	BCS	-
	LDA	(DST),Y
	PHA
	INY
	LDA	(DST),Y
	TAY
	PLA
+	INX
	STA	ESTKL,X
	STY	ESTKH,X
	RTS
++	LDY	#$00
--	LDA	(DST),Y
	INC	DSTL
	BEQ	+
---	ASL
	BCS	--
	LDA	#$02
	ADC	DSTL
	STA	DSTL
	BCC	-
	INC	DSTH
	BCS	-
+	INC	DSTH
	BNE	---
end

//
// Acorn MOS API
// (only the bits needed by this file; the rest lives in acornos.pla and is
// included by programs which need it)
//
asm osfile
	STX	ESP
	LDA	ESTKL+1,X
	PHA
	LDY	ESTKH,X
	LDA	ESTKL,X
	TAX
	PLA
	JSR	$FFDD
	LDX 	ESP
	INX
	STA	ESTKL,X
	LDA	#0
	STA	ESTKH,X
	RTS
end

// oscli_cr(command_as_cr_string)
asm oscli_cr
    STX ESP
    LDY ESTKH,X
    LDA ESTKL,X
    TAX
    JSR $FFF7
    LDX	ESP
    RTS
end


//
// NONLOCAL GOTO
//

// TODO: export this?
asm jmpbufsz
	LDA	ESTKL,X
	STA	TMPL
	LDA	ESTKH,X
	STA	TMPH
	LDY	#5
	LDA	(TMP),Y
	EOR	#255
	CLC
	ADC	#6
	STA	ESTKL,X
	LDA	#0
	ADC	#0
	STA	ESTKH,X
	RTS
end

// setjmp(jmp_buf b) -> 0 on save, longjmp val otherwise
asm setjmp
	STX	ESP

	LDY	#0
	LDA	ESTKL,X
	STA	TMPL
	STY	ESTKL,X
	LDA	ESTKH,X
	STA	TMPH
	STY	ESTKH,X

	TXA
	STA	(TMP),Y
	INY

+++	LDA	IFPL
	STA	(TMP),Y
	INY
	LDA	IFPH
	STA	(TMP),Y
	INY

	;* TODO: PPL/PPH not used in Apple 1 and therefore not here either,
	;* but may be eventually and may need to be saved.

	LDA	IPL
	STA	(TMP),Y
	INY
	LDA	IPH
	STA	(TMP),Y
	INY

	TYA
	CLC
	ADC	TMPL
	STA	TMPL
	BCC	+
	INC	TMPH
+	LDY	#0

	TSX
	TXA
	STA	(TMP),Y
--	INY
	INX
	BEQ	++
	LDA	$0100,X
	STA	(TMP),Y
	JMP	--

++	LDX	ESP
	RTS
end

// longjmp(jmp_buf b, word val)
asm longjmp
	LDA	ESTKL+1,X
	STA	TMPL
	LDA	ESTKH+1,X
	STA	TMPH
	LDA	ESTKL,X
	PHA
	LDA	ESTKH,X
	PHA

	LDY	#0
	LDA	(TMP),Y
	STA	ESP
	INY

+	LDA	(TMP),Y
	STA	IFPL
	INY
	LDA	(TMP),Y
	STA	IFPH
	INY

	;* TODO: PPL/PPH?

	LDA	(TMP),Y
	STA	IPL
	INY
	LDA	(TMP),Y
	STA	IPH
	INY

	TYA
	CLC
	ADC	TMPL
	STA	TMPL
	BCC	++
	INC	TMPH
++	LDY	#0

	LDA	(TMP),Y
	TAX
	TXS
--	INY
	INX
	BEQ	+++
	LDA	(TMP),Y
	STA	$0100,X
	JMP	--

+++	LDX ESP
	RTS
end

//
// CONSOLE I/O
//
asm cout
	LDA	ESTKL,X
	JMP	$FFE3
end
asm cin
	DEX
	JSR	$FFE0
	STA	ESTKL,X
	LDA	#$00
	STA	ESTKH,X
	RTS
end
asm rdstr
	;* TODO: Can I avoid duplicating this definitions?
	inbuff = $700

	STX	ESP
	LDA	ESTKL,X
	JSR	$FFEE ;* TODO: Use constants for OS entry points everywhere
	LDA	#<inbuff
	STA	ESTKL,X
	LDA	#>inbuff
	STA	ESTKH,X

	SEC
	LDA	IFPL
	SBC	#5
	STA	TMPL
	LDA	IFPH
	SBC	#0
	STA	TMPH
	LDA	#<(inbuff+1)
	LDY	#0
	STA	(TMP),Y
	LDA	#>(inbuff+1)
	INY
	STA	(TMP),Y
	LDA	#254
	INY
	STA	(TMP),Y
	LDA	#0
	INY
	STA	(TMP),Y
	LDA	#255
	INY
	STA	(TMP),Y

	LDA	#0
	LDX	TMPL
	LDY	TMPH
	JSR	$FFF1
	BCC	not_escape
	LDA	#126
	JSR	$FFF4
	BRK
	!BYTE	17
	!TEXT	"Escape"
	BRK
not_escape
	STY	inbuff

	LDX	ESP
	RTS
end
def crout
    return cout($0D)
end
def prstr(str)
    byte i
    i = 1
    while i <= ^str
        cout((str)[i])
	i = i + 1
    loop
end
def prbyte(v)
    cout(hexchar[(v >> 4) & $0F])
    return cout(hexchar[v & $0F])
end
def prword(v)
    prbyte(v >> 8)
    return prbyte(v)
end
// Convert a DCI string to an Acorn OS-style string terminated by CR
// TODO: This should probably be coded in assembly
def dcitocr(dci, cr)
    byte len, c
    len = 0
    repeat
        c = (dci).[len]
	(cr).[len] = c & $7F
	len = len + 1
    until !(c & $80)
    (cr).[len] = $D
    return len
end

//
// CFFA1 routines
// FILE I/O
//
//def opendir
//    perr = syscall($10)
//    return perr
//end
//def readdir
//    perr = syscall($12)
//    return *CFFAEntryPtr
//end
def readfile(filename, buffer)
    byte block[18]
    block:0 = filename
    block:2 = buffer
    block:4 = 0
    block:6 = 0
    perr = (osfile($FF, @block) == 0)
    return perr
end
//
// Heap routines.
//
def availheap
    byte fp
    return @fp - heap
end
def allocheap(size)
    word addr
    addr = heap
    heap = heap + size
    if uword_isge(heap, @addr)
        return 0
    fin
    return addr
end
def allocalignheap(size, pow2, freeaddr)
    word align, addr
    if freeaddr
        *freeaddr = heap
    fin
    align = (1 << pow2) - 1
    addr = (heap | align) + 1
    heap = addr + size
    if uword_isge(heap, @addr)
        return 0
    fin
    return addr
end
def markheap
    return heap
end
def releaseheap(newheap)
    heap = newheap
    return @newheap - heap
end

//
// Acorn MOS API
//

// TODO: This should probably be coded in assembly
def stocr(str, cr)
    byte len, c
    len = ^str
    (cr).[len] = 13
    while len
	c = (str).[len]
	len = len - 1
	(cr).[len] = c
    loop
end

// oscli(str)
export def oscli(str)
    // TODO: This will go wrong if the command is too long
    byte cr[253]
    stocr(str, @cr)
    oscli_cr(@cr)
end

//
// Symbol table routines.
//
def lookupsym(sym)
    return lookuptbl(sym, symtbl)
end
def addsym(sym, addr)
    while ^sym & $80
        ^lastsym = ^sym
        lastsym  = lastsym + 1
        sym      = sym     + 1
    loop
    lastsym->0 = ^sym
    lastsym=>1 = addr
    lastsym    = lastsym + 3
    ^lastsym   = 0
end
//
// Module routines.
//
def lookupmod(mod)
    byte dci[17]
    return lookuptbl(modtosym(mod, @dci), symtbl)
end
def lookupstrmod(str)
    byte mod[17]
    stodci(str, @mod)
    return lookupmod(@mod)
end
def addmod(mod, addr)
    byte dci[17]
    return addsym(modtosym(mod, @dci), addr)
end
def lookupextern(esd, index)
    word sym, addr
    byte str[16]
    while ^esd
        sym = esd
        esd = esd + dcitos(esd, @str)
        if esd->0 & $10 and esd->1 == index
            addr = lookupsym(sym)
	    if !addr
                perr = $81
	        cout('?')
		prstr(@str)
		crout
	    fin
            return addr
        fin
        esd = esd + 3
    loop
    return 0
end
def adddef(addr, deflast)
    word defentry
    defentry = *deflast
    *deflast = defentry + 5
    defentry->0 = $20
    defentry=>1 = interp
    defentry=>3 = addr
    defentry->5 = 0 // null out next entry
    return defentry
end
def lookupdef(addr, deftbl)
    while deftbl->0 == $20
        if deftbl=>3 == addr
            return deftbl
        fin
        deftbl = deftbl + 5
    loop
    return 0
end
def loadmod(mod)
    word rdlen, modsize, bytecode, defofst, defcnt, init, fixup
    word addr, modaddr, modfix, modend
    word deftbl, deflast
    word moddep, rld, esd, sym
    byte str[17], filename[17]
    byte header[128]
    //
    // Read the RELocatable module header (first 128 bytes)
    //
    dcitocr(mod, @filename)
    header.0 = @filename
    header.1 = (@filename) >> 8
    perr = (osfile(5, @header) <> 1)
    rdlen = header.10 + (header.11 << 8)
    crout()
    if perr
        return -perr
    fin
    if rdlen > 0
        readfile(@filename, heap)
	memcpy(@header, heap, 128)
	modsize = header:0
	moddep  = @header.1
	defofst = modsize
        init    = 0
        if rdlen > 4 and heap=>2 == $DA7E // DAVE = magic number :-)
            //
            // This is an EXTended RELocatable (data+bytecode) module.
            //
            defofst  = header:6
            defcnt   = header:8
            init     = header:10
            moddep   = @header.12
	    //
	    // Load module dependencies.
	    //
            while ^moddep
                if !lookupmod(moddep)
                    if loadmod(moddep) < 0
	      	        return -perr
		    fin
                fin
                moddep = moddep + dcitos(moddep, @str)
            loop
	    //
	    // Init def table.
	    //
	    deftbl   = allocheap(defcnt * 5 + 1)
	    deflast  = deftbl
	    ^deflast = 0
	    //
	    // Re-read file
	    //
	    readfile(@filename, heap)
        fin
	//
	// Alloc heap space for relocated module (data + bytecode).
	//
	moddep  = moddep  + 1 - @header + heap
	modfix  = moddep  - (heap + 2) // Adjust to skip header
	modsize = modsize - modfix
	rdlen   = rdlen   - modfix - 2
	modaddr = allocheap(modsize)
	memcpy(modaddr, moddep, rdlen)
	//
	// Add module to symbol table.
	//
	addmod(mod, modaddr)
	//
	// Apply all fixups and symbol import/export.
	//
        modfix   = modaddr - modfix
        bytecode = defofst + modfix - MODADDR
        modend   = modaddr + modsize
        rld      = modend  // Re-Locatable Directory
        esd      = rld     // Extern+Entry Symbol Directory
        while ^esd         // Scan to end of ESD
            esd = esd + 4
	loop
        esd = esd + 1
        //
        // Run through the Re-Location Dictionary.
        //
        while ^rld
            if ^rld == $02
	        //
		// This is a bytcode def entry - add it to the def directory.
		//
                adddef(rld=>1 - defofst + bytecode, @deflast)
            else
                addr = rld=>1 + modfix
                if uword_isge(addr, modaddr) // Skip fixups to header
                    if ^rld & $80 // WORD sized fixup.
                        fixup = *addr
                    else	  // BYTE sized fixup.
                        fixup = ^addr
                    fin
                    if ^rld & $10 // EXTERN reference.
                        fixup = fixup + lookupextern(esd, rld->3)
                    else	  // INTERN fixup.
                        fixup = fixup + modfix - MODADDR
                        if uword_isge(fixup, bytecode)
                            //
                            // Bytecode address - replace with call def directory.
                            //
                            fixup = lookupdef(fixup - bytecode + bytecode, deftbl)
                        fin
                    fin
                    if ^rld & $80 // WORD sized fixup.
                        *addr = fixup
                    else	  // BYTE sized fixup.
                        ^addr = fixup
                    fin
                fin
            fin
            rld = rld + 4
        loop
	//
        // Run through the External/Entry Symbol Directory.
	//
        while ^esd
            sym = esd
            esd = esd + dcitos(esd, @str)
            if ^esd & $08
		//
                // EXPORT symbol - add it to the global symbol table.
		//
                addr = esd=>1 + modfix - MODADDR
                if uword_isge(addr, bytecode)
		    //
		    // Use the def directory address for bytecode.
		    //
                    addr = lookupdef(addr - bytecode + bytecode, deftbl)
                fin
                addsym(sym, addr)
            fin
            esd = esd + 3
        loop
    fin
    if perr
        return -perr
    fin
    //
    // Call init routine if it exists.
    //
    fixup = 0
    if init
	fixup = adddef(init - defofst + bytecode, @deflast)()
    if fixup < 0
        perr = -fixup
    fin
	if !(systemflags & modinitkeep)
            modend = init - defofst + bytecode
	fin
    fin
    //
    // Free up the end-of-module in main memory.
    //
    releaseheap(modend)
    return fixup | (systemflags & modkeep)
end
//
// Command mode
//
def stripchars(strptr)
    while ^strptr and ^(strptr + 1) <> ' '
        memcpy(strptr + 1, strptr + 2, ^strptr)
        ^strptr = ^strptr - 1
    loop
    return ^strptr
end
def stripspaces(strptr)
    while ^strptr and ^(strptr + ^strptr) <= ' '
        ^strptr = ^strptr - 1
    loop
    while ^strptr and ^(strptr + 1) <= ' '
        memcpy(strptr + 1, strptr + 2, ^strptr)
        ^strptr = ^strptr - 1
    loop
end
def striptrail(strptr)
    byte i

    for i = 1 to ^strptr
        if (strptr)[i] == ' '
	    ^strptr = i - 1
	    return
	fin
    next
end
def parsecmd(strptr)
    byte cmd

    cmd = 0
    stripspaces(strptr)
    if ^strptr
        cmd = ^(strptr + 1)
        memcpy(strptr + 1, strptr + 2, ^strptr)
        ^strptr = ^strptr - 1
    fin
    stripspaces(strptr)
    return cmd
end
def execmod(modfile)
    byte moddci[17]
    word saveheap, savesym, saveflags, error, action, olderrjb
    // We know that we have a fairly shallow CPU stack here so we can
    // get away with this small jmp_buf on the stack; this saves us
    // having to allocate a fixed block of memory for it. (We can't
    // allocate on the heap temporarily here, as the space would get
    // 'trapped' below the loaded module if it's to remain resident.)
    byte jb[100]

    perr = 1
    if stodci(modfile, @moddci)
        saveheap  = heap
	savesym   = lastsym
	saveflags = systemflags
        olderrjb = *errjb
	error = setjmp(@jb)
	if error == 0
	    *errjb = @jb
	    action = loadmod(@moddci)
	fin
	*errjb = olderrjb
	if error <> 0 or action < modkeep
	    lastsym = savesym
	    heap    = saveheap
	fin
	^lastsym    = 0
	systemflags = saveflags
	if error <> 0
	    longjmp(*errjb, 42)
	fin
    fin
    return -perr
end
// User code could choose to install an alternate error handler, but
// it's probably not a good idea; most of the time user code should
// restrict itself to manipulating *errjb.
def error_handler
  longjmp(*errjb, 42) // TODONOW
end
//
// Get heap start.
//
heap = *freemem
//
// Init symbol table.
//
symtbl   = allocheap($200)
lastsym  = symtbl
^lastsym = 0
stodci(@syslibstr, heap)
addmod(heap, @version)
while *syslibsym
    stodci(syslibsym=>0, heap)
    addsym(heap, syslibsym=>2)
    syslibsym = syslibsym + 4
loop
//
// Set up error handler
//
*errjb = markheap()
perr = setjmp(*errjb)
if perr == 0
  allocheap(jmpbufsz(*errjb))
  *errfp = @error_handler
else
  crout
  prstr("Error $")
  prbyte(^errnum)
  prstr(": ")
  prstr(errstr)
  crout
fin
//
// Try to load autorun.
// TODO: This is disabled; it's awkward as it can cause an OS error, and
// it's not all that useful as a !BOOT file can do the same job.
//
cmdptr = heap
memset(cmdptr, 0, 128)
//readfile(@autorun, cmdptr + 1)
while ^(cmdptr + ^cmdptr + 1) >= ' '
    ^cmdptr = ^cmdptr + 1
loop
perr = 0
// TODO: Might be best to base this on cmd.pla's version not the Apple I code
//
// Print some startup info.
//
if not ^cmdptr
    prstr(@verstr)
    prbyte(version.1)
    cout('.')
    prbyte(version.0)
    crout
    prstr(@freestr)
    prword(availheap)
    crout
fin
//
// Handle commands.
//
while 1
    if ^cmdptr
        when toupper(parsecmd(cmdptr))
            is 'Q'
	        quit
//	    is 'M'
//	        syscall($02)
//		break
	    is '+'
	        execmod(cmdptr)
		break
	    is '*'
	    	oscli(cmdptr)
		break
	    otherwise
	        prstr(@huhstr)
        wend
        if perr
            prstr(@errorstr)
	    prbyte(perr)
	    perr = 0
        else
            prstr(@okstr)
        fin
	crout()
    fin
    // TODONOW: START TEMP?
    prstr(@freestr)
    prword(availheap)
    crout
    // TODONOW: END TEMP?
    prstr(@prompt)
    cmdptr = rdstr(':')
loop
done
