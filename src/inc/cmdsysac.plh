//
// Constants/exported functions specific to the Acorn port of the VM
//
// These have been pulled out into their own header; programs may include
// this and cmdsys.plh, which will cause them to declare two separate
// dependencies on the cmdsys module, but this isn't a problem. SFTODO: This is in flux now
//

// SFTODO: THE FEW CONSTANTS HERE ARE DUPLICATES AND IDEALLY I WOULD AVOID THEM BUT LET'S NOT WORRY ABOUT THEM FOR THE MOMENT AS I ADDRESS THE BULK OF THE DUPLICATES
import cmdsysac // SFTODO: semi-temporary hack on conjunction with related hack in compiler
    const errjb = $402
    const errnum = $700
    const errstr = $701
    predef oserror(n, msg)#0
    predef call_oscli(str)#0
    predef stocr(str, cr)#0
    predef mode(n)#1
    predef callalloca
    predef xheapalloc(size)#1
    predef lookupsym(str)#1 // SFTODO EXPERIMENTAL TEMP
    word modname

    // The standard except()/throw() interface in inc/longjmp.plh is supported
    // by the Acorn port. However, the buffer used to store the environment does
    // not need to be as large - the maximum size on this port is t_except_acorn
    // (actually 2 bytes less on PLAS32) - so you can get away with allocating a
    // buffer of size t_except_acorn instead of size t_except. Alternatively you
    // can use except2(), which will allocate a buffer of exactly the right size
    // from the heap (rather than assuming the worst case size):
    //     word bufptr                       
    //     if except2(@bufptr) == 0
    //         // first time
    //     else
    //         // get here via throw()
    //     fin
    //     ...
    //     throw(bufptr, 1)
    const t_except_acorn = $0125 // 1 + 32 + 4 + 1 + 255
    predef except2(bptr)#1
end
