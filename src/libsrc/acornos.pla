include "inc/cmdsys.plh"
include "inc/acornc.plh"

// TODO: Now I've got used to the call() interface, it may be that this
// isn't worth it - though perhaps for "performance sensitive" calls like
// OSBGET/OSBPUT (but not, say, OSFIND) it might be worth having custom
// assembly wrappers. Perhaps some of these should be deleted and this
// library mostly consists of constants for OS entry points and special
// values (like A values for OSFIND) in the header.

const eof = -1 // TODO: keep this? not sure

asm equates
    BBC = 1
    !SOURCE "vmsrc/plvmzp.inc"
    osbput = $FFD4 ; TODO: need to centralise these for assembler
end

// void call_osbput(byte c, int handle)
export asm call_osbput
    LDA ESTKL+1,X
    LDY ESTKL,X
    INX
    JMP osbput
end

def call_osfind_open_internal(a, filename, filename_cr)
    stocr(filename, filename_cr)
    return call(a, filename_cr, filename_cr >> 8, 0, osfind).0
end

export def call_osfind_open(a, filename)
    return callalloca(a, filename, @call_osfind_open_internal, ^filename + 1)
end

// TODO: Might be worth coding this in assembly for performance - if
// we don't, there's almost no point having it, just use acornc.plh
export def call_osbget(handle)
    word result
    result = call(0, 0, handle, 0, osbget)
    if result->3 & 1
	return eof
    else
	return result->0
    fin
end

export def call_osrdch()
    return call(0, 0, 0, 0, osrdch).0
end

// vi: sts=4 sw=4
